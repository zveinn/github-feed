package main

import (
	"fmt"
	"time"

	"github.com/google/go-github/v57/github"
)

func fetchAndDisplayActivityV2() {
	result, resp, err := config.client.Search.Issues(config.ctx, "is:pr author:zveinn", &github.SearchOptions{
		Sort:        "",
		Order:       "",
		TextMatch:   false,
		ListOptions: github.ListOptions{PerPage: 100},
	})
	if err != nil {
		panic(err)
	}
	fmt.Println(len(result.Issues))
	fmt.Println(resp)
	for _, v := range result.Issues {
		fmt.Println(v.GetCreatedAt(), v.GetUser().GetLogin(), v.GetTitle())
		fmt.Println("LINK:", v.GetPullRequestLinks().GetURL())
	}

	return
	// result, resp, err := config.client.Activity.ListEventsReceivedByUser(config.ctx, "zveinn", false, &github.ListOptions{
	// 	Page:    0,
	// 	PerPage: 100000,
	// })
	// if err != nil {
	// 	panic(err)
	// }
	// fmt.Println(len(result))
	// fmt.Println(resp)
	// for _, v := range result {
	// 	x := new(AutoGenerated)
	// 	err := json.Unmarshal(*v.RawPayload, x)
	// 	if err != nil {
	// 		panic(err)
	// 	}
	// 	if x.Action == "" {
	// 		fmt.Println()
	// 		fmt.Println(v.GetType())
	// 		fmt.Println(string(*v.RawPayload))
	// 		fmt.Println()
	// 	}
	// 	fmt.Println(x.Action, x.Issue.User.Login, x.Issue.CreatedAt, x.Issue.RepositoryURL)
	// 	// if v.Repo != nil {
	// 	// 	fmt.Println()
	// 	// 	fmt.Println(v.GetCreatedAt(), v.GetType(), v.GetActor().GetLogin(), v.Repo.GetURL())
	// 	// 	fmt.Println()
	// 	// 	fmt.Println(string(*v.RawPayload))
	// 	// 	fmt.Println()
	// 	// } else {
	// 	// 	fmt.Println(v.GetCreatedAt(), v.GetType(), v.GetActor().GetLogin())
	// 	// }
	// }
}

type AutoGenerated struct {
	Action string `json:"action"`
	Issue  struct {
		URL           string `json:"url"`
		RepositoryURL string `json:"repository_url"`
		LabelsURL     string `json:"labels_url"`
		CommentsURL   string `json:"comments_url"`
		EventsURL     string `json:"events_url"`
		HTMLURL       string `json:"html_url"`
		ID            int64  `json:"id"`
		NodeID        string `json:"node_id"`
		Number        int    `json:"number"`
		Title         string `json:"title"`
		User          struct {
			Login             string `json:"login"`
			ID                int    `json:"id"`
			NodeID            string `json:"node_id"`
			AvatarURL         string `json:"avatar_url"`
			GravatarID        string `json:"gravatar_id"`
			URL               string `json:"url"`
			HTMLURL           string `json:"html_url"`
			FollowersURL      string `json:"followers_url"`
			FollowingURL      string `json:"following_url"`
			GistsURL          string `json:"gists_url"`
			StarredURL        string `json:"starred_url"`
			SubscriptionsURL  string `json:"subscriptions_url"`
			OrganizationsURL  string `json:"organizations_url"`
			ReposURL          string `json:"repos_url"`
			EventsURL         string `json:"events_url"`
			ReceivedEventsURL string `json:"received_events_url"`
			Type              string `json:"type"`
			UserViewType      string `json:"user_view_type"`
			SiteAdmin         bool   `json:"site_admin"`
		} `json:"user"`
		Labels           []any     `json:"labels"`
		State            string    `json:"state"`
		Locked           bool      `json:"locked"`
		Assignee         any       `json:"assignee"`
		Assignees        []any     `json:"assignees"`
		Milestone        any       `json:"milestone"`
		Comments         int       `json:"comments"`
		CreatedAt        time.Time `json:"created_at"`
		UpdatedAt        time.Time `json:"updated_at"`
		ClosedAt         any       `json:"closed_at"`
		Type             any       `json:"type"`
		ActiveLockReason any       `json:"active_lock_reason"`
		SubIssuesSummary struct {
			Total            int `json:"total"`
			Completed        int `json:"completed"`
			PercentCompleted int `json:"percent_completed"`
		} `json:"sub_issues_summary"`
		IssueDependenciesSummary struct {
			BlockedBy      int `json:"blocked_by"`
			TotalBlockedBy int `json:"total_blocked_by"`
			Blocking       int `json:"blocking"`
			TotalBlocking  int `json:"total_blocking"`
		} `json:"issue_dependencies_summary"`
		Body      any `json:"body"`
		Reactions struct {
			URL        string `json:"url"`
			TotalCount int    `json:"total_count"`
			Num1       int    `json:"+1"`
			Num10      int    `json:"-1"`
			Laugh      int    `json:"laugh"`
			Hooray     int    `json:"hooray"`
			Confused   int    `json:"confused"`
			Heart      int    `json:"heart"`
			Rocket     int    `json:"rocket"`
			Eyes       int    `json:"eyes"`
		} `json:"reactions"`
		TimelineURL           string `json:"timeline_url"`
		PerformedViaGithubApp any    `json:"performed_via_github_app"`
		StateReason           any    `json:"state_reason"`
	} `json:"issue"`
	Comment struct {
		URL      string `json:"url"`
		HTMLURL  string `json:"html_url"`
		IssueURL string `json:"issue_url"`
		ID       int64  `json:"id"`
		NodeID   string `json:"node_id"`
		User     struct {
			Login             string `json:"login"`
			ID                int    `json:"id"`
			NodeID            string `json:"node_id"`
			AvatarURL         string `json:"avatar_url"`
			GravatarID        string `json:"gravatar_id"`
			URL               string `json:"url"`
			HTMLURL           string `json:"html_url"`
			FollowersURL      string `json:"followers_url"`
			FollowingURL      string `json:"following_url"`
			GistsURL          string `json:"gists_url"`
			StarredURL        string `json:"starred_url"`
			SubscriptionsURL  string `json:"subscriptions_url"`
			OrganizationsURL  string `json:"organizations_url"`
			ReposURL          string `json:"repos_url"`
			EventsURL         string `json:"events_url"`
			ReceivedEventsURL string `json:"received_events_url"`
			Type              string `json:"type"`
			UserViewType      string `json:"user_view_type"`
			SiteAdmin         bool   `json:"site_admin"`
		} `json:"user"`
		CreatedAt time.Time `json:"created_at"`
		UpdatedAt time.Time `json:"updated_at"`
		Body      string    `json:"body"`
		Reactions struct {
			URL        string `json:"url"`
			TotalCount int    `json:"total_count"`
			Num1       int    `json:"+1"`
			Num10      int    `json:"-1"`
			Laugh      int    `json:"laugh"`
			Hooray     int    `json:"hooray"`
			Confused   int    `json:"confused"`
			Heart      int    `json:"heart"`
			Rocket     int    `json:"rocket"`
			Eyes       int    `json:"eyes"`
		} `json:"reactions"`
		PerformedViaGithubApp any `json:"performed_via_github_app"`
	} `json:"comment"`
}
